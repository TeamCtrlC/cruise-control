openapi: "3.0.0"
info:
  title: Cruise Control API
  version: 1.0.0
components:
  schemas:
    OptimizationResult:
      type: object
      required:
        - loadAfterOptimization
        - summary
        - goalSummary
      properties:
        proposals:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionProposal'
        loadBeforeOptimization:
          $ref: '#/components/schemas/BrokerStats'
        summary:
          $ref: '#/components/schemas/OptimizerResult'
        goalSummary:
          type: array
          items:
            $ref: '#/components/schemas/GoalStatus'
        loadAfterOptimization:
          $ref: '#/components/schemas/BrokerStats'
        version:
          type: integer
          format: int32
    GoalStatus:
      type: object
      required:
        - goal
        - status
        - clusterModelStats
      properties:
        goal:
          type: string
        status:
          type: string
          enum:
            - "VIOLATED"
            - "FIXED"
            - "NO-ACTION"
        clusterModelStats:
          $ref: '#/components/schemas/ClusterModelStats'
    ClusterModelStats:
      type: object
      required:
        - metadata
        - statistics
      properties:
        metadata:
          $ref: '#/components/schemas/ClusterModelStatsMetaData'
        statistics:
          $ref: '#/components/schemas/ClusterModelStatsValue'
    ClusterModelStatsValue:
      type: object
      required:
        - AVG
        - MAX
        - MIN
        - ST_DEV
      properties:
        AVG:
          $ref: '#/components/schemas/ClusterModelStatsValueHolder'
        MAX:
          $ref: '#/components/schemas/ClusterModelStatsValueHolder'
        MIN:
          $ref: '#/components/schemas/ClusterModelStatsValueHolder'
        ST_DEV:
          $ref: '#/components/schemas/ClusterModelStatsValueHolder'
    ClusterModelStatsMetaData:
      type: object
      required:
        - brokers
        - replicas
        - topics
      properties:
        brokers:
          type: integer
          format: int32
        replicas:
          type: integer
          format: int32
        topics:
          type: integer
          format: int32
    OptimizerResult:
      type: object
      required:
        - numReplicaMovements
        - dataToMoveMB
        - numIntraBrokerReplicaMovements
        - intraBrokerDataToMoveMB
        - numLeaderMovements
        - recentWindows
        - monitoredPartitionsPercentage
        - excludedTopics
        - excludedBrokersForReplicaMove
        - excludedBrokersForLeadership
        - onDemandBalancednessScoreBefore
        - onDemandBalancednessScoreAfter
      properties:
        numReplicaMovements:
          type: integer
          format: int32
        dataToMoveMB:
          type: integer
          format: int64
        numIntraBrokerReplicaMovements:
          type: integer
          format: int32
        intraBrokerDataToMoveMB:
          type: integer
          format: int64
        numLeaderMovements:
          type: integer
          format: int32
        recentWindows:
          type: integer
          format: int32
        monitoredPartitionsPercentage:
          type: number
          format: double
        excludedTopics:
          type: array
          items:
            type: string
        excludedBrokersForReplicaMove:
          type: array
          items:
            type: integer
            format: int32
        excludedBrokersForLeadership:
          type: array
          items:
            type: integer
            format: int32
        onDemandBalancednessScoreBefore:
          type: number
          format: double
        onDemandBalancednessScoreAfter:
          type: number
          format: double
    ExecutionProposal:
      type: object
      required:
        - topicPartition
        - oldLeader
        - oldReplicas
        - newReplicas
      properties:
        topicPartition:
          type: string
        oldLeader:
          type: integer
          format: int32
        oldReplicas:
          type: array
          items:
            type: integer
            format: int32
        newReplicas:
          type: array
          items:
            type: integer
            format: int32
    BrokerStats:
      type: object
      required:
        - hosts
        - brokers
      properties:
        version:
          type: integer
          format: int32
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/SingleHostStats'
        brokers:
          type: array
          items:
            $ref: '#/components/schemas/SingleBrokerStats'
    SingleBrokerStats:
      type: object
      required:
        - host
        - broker
        - brokerState
        - diskMB
        - diskPct
        - cpuPct
        - leaderNwInRate
        - followerNwInRate
        - nwOutRate
        - pnwOutRate
        - replicas
        - leaders
      properties:
        host:
          type: string
        broker:
          type: integer
          format: int32
        brokerState:
          type: string
          enum:
            - ALIVE
            - DEAD
            - NEW
            - DEMOTED
            - BAD_DISKS
        diskMB:
          type: number
          format: double
        diskPct:
          type: number
          format: double
        cpuPct:
          type: number
          format: double
        leaderNwInRate:
          type: number
          format: double
        followerNwInRate:
          type: number
          format: double
        nwOutRate:
          type: number
          format: double
        pnwOutRate:
          type: number
          format: double
        replicas:
          type: integer
          format: int32
        leaders:
          type: integer
          format: int32
        diskState:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DiskStats'
    DiskStats:
      type: object
      description: Based on _diskStatsByLogDir
      required:
        - diskMB
        - diskPct
        - numLeaderReplicas
        - numReplicas
      properties:
        diskMB:
          oneOf:
            - type: string
              enum:
                - "DEAD"
            - type: number
              format: double
        diskPct:
          oneOf:
            - type: string
              enum:
                - "DEAD"
            - type: number
              format: double
        numLeaderReplicas:
          type: integer
          format: int32
        numReplicas:
          type: integer
          format: int32
    SingleHostStats:
      type: object
      required:
        - host
        - diskMB
        - diskPct
        - cpuPct
        - leaderNwInRate
        - followerNwInRate
        - nwOutRate
        - pnwOutRate
        - replicas
        - leaders
      properties:
        host:
          type: string
        diskMB:
          type: number
          format: double
        diskPct:
          type: number
          format: double
        cpuPct:
          type: number
          format: double
        leaderNwInRate:
          type: number
          format: double
        followerNwInRate:
          type: number
          format: double
        nwOutRate:
          type: number
          format: double
        pnwOutRate:
          type: number
          format: double
        replicas:
          type: integer
          format: int32
        leaders:
          type: integer
          format: int32
    ClusterModelStatsValueHolder:
      type: object
      required:
        - cpu
        - networkInbound
        - networkOutbound
        - disk
        - potentialNwOut
        - replicas
        - leaderReplicas
        - topicReplicas
      properties:
        cpu:
          type: number
          format: double
        networkInbound:
          type: number
          format: double
        networkOutbound:
          type: number
          format: double
        disk:
          type: number
          format: double
        potentialNwOut:
          type: number
          format: double
        replicas:
          type: number
        leaderReplicas:
          type: number
        topicReplicas:
          type: number
    ProgressResult:
      type: object
      required:
        - progress
      properties:
        version:
          type: integer
          format: int32
        progress:
          type: array
          items:
            $ref: '#/components/schemas/OperationProgress'
    OperationProgress:
      type: object
      required:
        - operation
        - operationProgress
      properties:
        operation:
          type: string
        operationProgress:
          type: array
          items:
            $ref: '#/components/schemas/StepProgress'
    StepProgress:
      type: object
      required:
        - step
        - description
        - timeInMs
        - completionPercentage
      properties:
        step:
          type: string
        description:
          type: string
        timeInMs:
          type: integer
          format: int64
        completionPercentage:
          type: number
          format: double
paths:
  /kafkacruisecontrol/rebalance:
    post:
      operationId: rebalance
      summary: Rebalance a Kafka cluster based on goals
      parameters:
        - in: query
          name: dryrun
          description: Whether dry-run the request or not
          schema:
            type: boolean
            default: true
        - in: query
          name: goals
          description: list of goals used to generate proposal
          schema:
            type: array
            items:
              type: string
            # default is every goal
        - in: query
          name: allow_capacity_estimation
          description: Whether to allow broker capacity to be estimated
          schema:
            type: boolean
            default: false
        - in: query
          name: concurrent_partition_movements_per_broker
          description: The upper bound of ongoing replica movements going into/out of each broker
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: concurrent_intra_broker_partition_movements
          description: The upper bound of ongoing replica movements between disks within each broker
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: concurrent_leader_movements
          description: The upper bound of ongoing leadership movements
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: json
          description: Whether to return in JSON format or not
          schema:
            type: boolean
            default: false
        - in: query
          name: skip_hard_goal_check
          description: Whether to allow hard goal be skipped in proposal generation
          schema:
            type: boolean
            default: false
        - in: query
          name: excluded_topics
          description: Whether to allow hard goal be skipped in proposal generation
          schema:
            type: string # topics regex
            default: null
        - in: query
          name: use_ready_default_goals
          description: Whether to only use ready goals to generate proposal
          schema:
            type: boolean
            default: false
        - in: query
          name: data_from
          description: Whether to calculate proposal from available valid partitions or valid windows
          schema:
            type: string
            default: VALID_WINDOWS
        - in: query
          name: verbose
          description: Return detailed state information
          schema:
            type: boolean
            default: false
        - in: query
          name: exclude_recently_demoted_brokers
          description: Whether to allow leader replicas to be moved to recently demoted broker
          schema:
            type: boolean
            default: false
        - in: query
          name: replica_movement_strategies
          description: Replica movement strategies to use
          schema:
            type: array
            items:
              type: string
        - in: query
          name: ignore_proposal_cache
          description: Whether to ignore the cached proposal or not
          schema:
            type: boolean
            default: false
        - in: query
          name: destination_broker_ids
          description: Whether to allow leader replicas to be moved to recently demoted broker
          schema:
            type: array
            items:
              type: string
        - in: query
          name: kafka_assigner
          description: Whether to use Kafka assigner mode to general proposal
          schema:
            type: boolean
            default: false
        - in: query
          name: rebalance_disk
          description: Whether to balance load between brokers or between disks within broker
          schema:
            type: boolean
            default: false
        - in: query
          name: review_id
          description: Review id for 2FA
          schema:
            type: string
        - in: query
          name: replication_throttle
          description: Upper bound on the bandwidth used to move replicas
          schema:
            type: integer
            format: int32
        - in: query
          name: execution_progress_check_interval_ms
          description: Execution progress check interval in milliseconds
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |-
            Successful rebalance response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptimizationResult'
            text/plain:
              schema:
                type: string
        '202':
          description: |-
            Rebalancing in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgressResult'
            text/plain:
              schema:
                type: string